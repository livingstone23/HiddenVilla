@page "/lifecycle"
@using System.Threading

<h1>Lifecycle</h1>

<div>
    <LifecycleComponent CountValue="@currentCount">

    </LifecycleComponent>
</div>

<p>Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<br /> @Count <button class="btn alert-secondary" @onclick="StartCountdown">Start Countdown</button>
<hr />

@foreach (var item in EventType)
{
    @item
    <hr/>
}

@code {

    private int currentCount = 0;

    private int Count { get; set; } = 5;

    List<String> EventType = new List<string>();

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("On initialized is called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("On initializaedAsync is called");
    }

    protected override void OnParametersSet()
    {
        EventType.Add("Child - OnparameterSet is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("Child - OnParametersSetAsync is called");

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }

        EventType.Add("OnAfterRender is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync is called");
        await Task.Delay(1000);
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender is called");
        return true;
    }

    void StartCountdown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    void TimeCallBack(object state)
    {
        if (Count > 0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }

    }

}